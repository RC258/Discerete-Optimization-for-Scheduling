//The times for shifts 1 - 12 are outlined below:
// 1: 12 a.m - 2 a.m
// 2:  2 a.m - 4 a.m
// 3:  4 a.m - 6 a.m
// 4:  6 a.m - 8 a.m 
// 5:  8 a.m - 10 p.m
// 6: 10 a.m - 12 p.m
// 7: 12 p.m -  2 p.m
// 8:  2 p.m -  4 p.m
// 9:  4 p.m -  6 p.m
//10:  6 p.m -  8 p.m
//11:  8 p.m - 10 p.m 
//12: 10 p.m - 12 p.m

//We assign Monday as the 1st day of the week and Sunday as the 7th day of the week
int Monday = 1;
int Tuesday = 2;
int Wednesday = 3;
int Thursday = 4;
int Friday = 5;
int Saturday = 6;
int Sunday = 7;

int INTmaxshifts = ...; //Maximum number of shifts an international student can work
int LOCmaxshifts = ...; //Maximum number of shifts a local student can work
int maxshifts = ...; //Maximum number of shifts in total in a day
int maxdays = ...; //The number of days the schedule will consider

{string} workers = ...; //Set with names for international and local students, boss and the closing times
int cost[workers] = [24,24,24,24,36,36,0,0]; // Vatiation vatiable: We can further adpot use cost to define the total minimum cost of sceduling


range shifts = 1..maxshifts;
range days= 1..maxdays;

//Tuple used for closing times
tuple close
{
 string ppl;
 int day;
 int shift;
}

//Closing times for the store are from Shifts 1 - 6 on Saturday and Sunday
{close} isClosed with ppl in workers =
{<"CLOSED",w,s> | w in {Saturday,Sunday},s in shifts: (1 <= s <= 6)}
;

//Tuple for unavailability of international student 1 (INT1)
tuple int1
{
 string ppl;
 int day;
 int shift;
}
{int1} int1not with ppl in workers =

//Course-Work time conflicts for INT1
{<"INT1",w,s> | w in {Tuesday,Thursday},s in shifts: (1 <= s <= 6)}
union
{<"INT1",w,s> | w in {Tuesday,Thursday},s in shifts: (9 <= s <= 10)}
union
{<"INT1",w,s> | w in {Monday},s in shifts: (10 <= s <= 11)}
union
{<"INT1",w,s> | w in {Monday},s in shifts: (1 <= s <= 4)}
union
{<"INT1",w,s> | w in {Thursday},s in shifts: (8 <= s <= 9)}
//Cannot be scheduled in night shifts (11<=s<=12) if he/she has course next day morning
union
{<"INT1",w,s> | w in {Monday,Wednesday},s in shifts: (11 <= s <= 12)}
;

//Tuple for unavailability of international student 2 (INT2)
tuple int2
{
 string ppl;
 int day;
 int shift;
}

{int2} int2not with ppl in workers =
//Course-Work time conflict for INT2
{<"INT2",w,s> | w in {Tuesday,Thursday},s in shifts: (1 <= s <= 7)}
union
{<"INT2",w,s> | w in {Monday,Wednesday},s in shifts: (8 <= s <= 9)}
union
{<"INT2",w,s> | w in {Monday,Wednesday},s in shifts: (1 <= s <= 4)}
union
{<"INT2",w,s> | w in {Wednesday},s in shifts: (s == 10)}
union
{<"INT2",w,s> | w in {Friday},s in shifts: (1 <= s <= 6)}
//Cannot be scheduled in night shifts (11<=s<=12) if he/she has course next day morning
union
{<"INT2",w,s> | w in {Monday,Wednesday,Thursday},s in shifts: (11 <= s <= 12)}
;

//Tuple for unavailability of international student 3 (INT3)
tuple int3
{
 string ppl;
 int day;
 int shift;
}

{int3} int3not with ppl in workers =
//Course-Work time conflict for INT3
{<"INT3",w,s> | w in {Monday,Tuesday,Wednesday,Thursday,Friday},s in shifts: (1 <= s <= 8)}
//Cannot be scheduled in night shifts (11<=s<=12) if he/she has course next day morning
union
{<"INT3",w,s> | w in {Monday,Tuesday,Wednesday,Thursday},s in shifts: (11 <= s <= 12)}
;

//Tuple for unavailability of international student 4 (INT4)
tuple int4
{
 string ppl;
 int day;
 int shift;
}

{int4} int4not with ppl in workers =
//Course-Work time conflict for INT4
{<"INT4",w,s> | w in {Monday,Tuesday,Wednesday,Thursday,Friday},s in shifts: (1 <= s <= 7)}
//Cannot be scheduled in night shifts (11<=s<=12) if he/she has course next day morning
union
{<"INT4",w,s> | w in {Monday,Tuesday,Wednesday,Thursday},s in shifts: (11 <= s <= 12)}
;


//Decision Variables
dvar boolean x[workers][days][shifts]; //Array to determine if work w can work on day d and shift s

dvar int+ nbShifts[workers]; //Array with the number of shifts for each worker

//Objective function
//Objective to balance number of shifts between local and international students
//minimize max(w in {"LOC1", "LOC2"}) nbShifts[w] - min(w in {"INT1", "INT2", "INT3", "INT4"}) nbShifts[w];

	//Variation: We apply cost to instead of the ensure balance number of shifts between local and international students
	minimize sum(d in workers, i in days, s in shifts) cost[d]*x[d][i][s];


//Constraint Starts
subject to{
  
  //#1: 1 and only 1 worker per shift, for all workers
 forall(i in days,s in shifts) sum(w in workers) x[w][i][s] == 1;
  
 //#2:  Initialize nbShifts to contain the number of shifts for each worker across all days
 forall(w in workers)
 nbShifts[w] == sum(i in days,s in shifts) x[w][i][s];
 
 //#3 Ensure each international student (INT) is fully scheduled for 10 shifts each week 
 forall(w in {"INT1", "INT2", "INT3", "INT4"}) sum(s in shifts, i in days) x[w][i][s] == INTmaxshifts;
  
 //#4: Ensure each Local student (LOC) is fully scheduled for 14 shifts each week
 forall(w in {"LOC1", "LOC2"}) sum(s in shifts, i in days) x[w][i][s] == LOCmaxshifts;
 
  
 //#5: Each international student (INT) can work at most 2 shifts each day (4 hrs)
 forall(w in {"INT1", "INT2", "INT3", "INT4"},i in days) sum(s in shifts) x[w][i][s] <= 2;
 
 //#6: Each local student (LOC) can work at most 4 shifts each day(8 hrs)
 forall(w in {"LOC1", "LOC2"},i in days) sum(s in shifts) x[w][i][s]<= 4;
 
 //#7: Ensure each worker's daily shifts are scheduled consecutively 
 forall(w in {"INT1", "INT2", "INT3", "INT4","LOC1", "LOC2"},i in days, s in shifts:(s+1) in shifts && (s+2) in shifts){
  (x[w][i][s+1] == 1) => ((x[w][i][s] == 1) || (x[w][i][s+2] == 1));
  }
 
 //#8: If a worker is scheduled in night period then he/she cannot be scheduled for tomorrow's' morning period;
 forall(w in {"INT1", "INT2", "INT3", "INT4","LOC1", "LOC2"},i in days: (i+1) in days, s1 in shifts: 11<=s1<=12, s2 in shifts: 1<=s2<=4){
  (x[w][i][s1] == 1) => (x[w][i+1][s2] == 0);
  }
 
 //#9: Ensure the store is closed 12 shifts in total during the weekend
 forall(w in {"CLOSED"}) sum(s in shifts, i in days) x[w][i][s] <= 12;
  
 //#10: Time conflict constraints for each international student (INT)
 	//INT1 unavailable
 	forall(w in workers,i in days,s in shifts:<w,i,s>  in int1not)
	x[w][i][s] == 0;
	
	//INT2 unavailable
	forall(w in workers,i in days,s in shifts:<w,i,s>  in int2not)
	x[w][i][s] == 0;
  
  	//INT3 unavailable
	forall(d in workers,i in days,s in shifts:<d,i,s>  in int3not)
	x[d][i][s] == 0;
	
	//INT4 unavailable
	forall(w in workers,i in days,s in shifts:<w,i,s>  in	 int4not)
	x[w][i][s] == 0;
	
    //#10: Store closed weekend morning	
	forall(w in workers,i in days,s in shifts:<w,i,s>  in isClosed)
	x[w][i][s] == 1;
	
	

}//Constraints End

//output export
string Schedule[s in shifts][i in days]=
 first({gu | gu in workers: x[gu][i][s] == 1}); 

 
execute display{
for(var i in days){
 write("Day ",i," : ");
 for(var s in shifts) write(Schedule[s][i]," ");
 writeln();

}
}